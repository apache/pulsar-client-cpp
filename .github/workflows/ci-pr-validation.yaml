#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: PR validation
on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Install deps
        run: |
            sudo apt-get install -y             \
                libcurl4-openssl-dev            \
                protobuf-compiler               \
                libprotobuf-dev                 \
                libboost-dev                    \
                libboost-program-options-dev    \
                libzstd-dev                     \
                libsnappy-dev                   \
                libgmock-dev                    \
                libgtest-dev

      - name: Install gtest-parallel
        run: |
          sudo curl -o /gtest-parallel https://raw.githubusercontent.com/google/gtest-parallel/master/gtest_parallel.py 

      - name: CMake
        run: cmake . -DBUILD_PERF_TOOLS=ON

      - name: Check formatting
        run: make check-format

      - name: Build
        run: make -j8

      - name: Start Pulsar service
        run: ./pulsar-test-service-start.sh

      - name: Run unit tests
        run: ./run-unit-tests.sh

      - name: Stop Pulsar service
        run: ./pulsar-test-service-stop.sh


  cpp-build-windows:
    timeout-minutes: 120
    name: Build CPP Client on ${{ matrix.name }}
    needs: unit-tests
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_ROOT: '${{ github.workspace }}/vcpkg'
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Windows x64'
            os: windows-2022
            triplet: x64-windows
            vcpkg_dir: 'C:\vcpkg'
            suffix: 'windows-win64'
            generator: 'Visual Studio 17 2022'
            arch: '-A x64'
          - name: 'Windows x86'
            os: windows-2022
            triplet: x86-windows
            vcpkg_dir: 'C:\vcpkg'
            suffix: 'windows-win32'
            generator: 'Visual Studio 17 2022'
            arch: '-A Win32'

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        id: vcpkg-cache
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            vcpkg_installed
            !${{ env.VCPKG_ROOT }}/.git
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: |
            ${{ runner.os }}-${{ matrix.triplet}}-${{ hashFiles( 'pulsar-client-cpp/vcpkg.json' ) }}

      - name: Get vcpkg(windows)
        if: ${{ runner.os == 'Windows' && steps.vcpkg-cache.outputs.cache-hit != 'true' }}
        run: |
          cd ${{ github.workspace }}
          mkdir build -force
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: remove system vcpkg(windows)
        if: runner.os == 'Windows'
        run: rm -rf "$VCPKG_INSTALLATION_ROOT"
        shell: bash

      - name: Install vcpkg packages
        run: |
          ${{ env.VCPKG_ROOT }}\vcpkg.exe install --triplet ${{ matrix.triplet }}

      - name: Configure (default)

        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake \
              -B ./build-0 \
              -G "${{ matrix.generator }}" ${{ matrix.arch }} \
              -DBUILD_TESTS=OFF \
              -DVCPKG_TRIPLET=${{ matrix.triplet }} \
              -DCMAKE_BUILD_TYPE=Release \
              -S .
          fi

      - name: Compile
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake --build ./build-0 --parallel --config Release
          fi

      - name: Configure (dynamic library only)
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake \
              -B ./build-1 \
              -G "${{ matrix.generator }}" ${{ matrix.arch }} \
              -DBUILD_TESTS=OFF \
              -DVCPKG_TRIPLET=${{ matrix.triplet }} \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_STATIC_LIB=OFF \
              -S .
          fi

      - name: Compile
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake --build ./build-1 --parallel --config Release
          fi

  deb-packaging:
    name: Build Debian Package
    runs-on: ubuntu-20.04
    needs: unit-tests
    timeout-minutes: 120

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Package Pulsar source
        run: build-support/generate-source-archive.sh

      - uses: docker/setup-buildx-action@v2
      - run: build-support/copy-deps-versionfile.sh

      - name: Build dependencies Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./pkg/deb
          load: true
          tags: build-deb-x86_64:latest
          build-args: PLATFORM=x86_64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Debian packages
        run: pkg/deb/docker-build-deb-x86_64.sh build-deb-x86_64:latest


  rpm-packaging:
    name: Build RPM Package
    runs-on: ubuntu-20.04
    needs: unit-tests
    timeout-minutes: 120

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Package Pulsar source
        run: build-support/generate-source-archive.sh

      - uses: docker/setup-buildx-action@v2
      - run: build-support/copy-deps-versionfile.sh

      - name: Build dependencies Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./pkg/rpm
          load: true
          tags: build-rpm-x86_64:latest
          build-args: PLATFORM=x86_64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build RPM packages
        run: pkg/rpm/docker-build-rpm-x86_64.sh build-rpm-x86_64:latest


  apk-packaging:
    name: Build Alpine Linux APK Package
    runs-on: ubuntu-20.04
    needs: unit-tests
    timeout-minutes: 120

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Package Pulsar source
        run: build-support/generate-source-archive.sh

      - uses: docker/setup-buildx-action@v2
      - run: build-support/copy-deps-versionfile.sh

      - name: Build dependencies Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./pkg/apk
          load: true
          tags: build-apk-x86_64:latest
          build-args: PLATFORM=x86_64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build APK packages
        run: pkg/apk/docker-build-apk-x86_64.sh build-apk-x86_64:latest