#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: CI - Build binary artifacts
on:
  push:
    tags:
      - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  package-linux:
    name: Build ${{matrix.pkg.name}} ${{matrix.cpu.platform}}
    runs-on: ubuntu-22.04
    timeout-minutes: 500

    strategy:
      fail-fast: false
      matrix:
        pkg:
          - { name: 'RPM', type: 'rpm', path: 'pkg/rpm/RPMS' }
          - { name: 'Deb', type: 'deb', path: 'pkg/deb/BUILD/DEB' }
          - { name: 'Alpine', type: 'apk', path: 'pkg/apk/build' }
        cpu:
          - { arch: 'x86_64', platform: 'x86_64' }
          - { arch: 'aarch64', platform: 'arm64' }

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Package Pulsar source
        run: build-support/generate-source-archive.sh

      - uses: docker/setup-buildx-action@v2
      - run: build-support/copy-deps-versionfile.sh

      - name: Build dependencies Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./pkg/${{matrix.pkg.type}}
          load: true
          tags: build:latest
          platforms: linux/${{matrix.cpu.platform}}
          build-args: PLATFORM=${{matrix.cpu.arch}}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build packages
        run: pkg/${{matrix.pkg.type}}/docker-build-${{matrix.pkg.type}}-${{matrix.cpu.platform}}.sh build:latest

      - name: Zip artifact
        run: zip -r ${{matrix.pkg.type}}-${{matrix.cpu.platform}}.zip ${{matrix.pkg.path}}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{matrix.pkg.type}}-${{matrix.cpu.platform}}.zip
          asset_name: ${{matrix.pkg.type}}-${{matrix.cpu.platform}}.zip
          tag: ${{ github.ref }}
          overwrite: true

  package-windows:
    timeout-minutes: 120
    name: Build CPP Client on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_ROOT: '${{ github.workspace }}/vcpkg'
    strategy:
      fail-fast: false
      matrix:
        mode: [ Release, Debug ]
        include:
          - name: 'Windows x64'
            os: windows-2022
            triplet: x64-windows
            vcpkg_dir: 'C:\vcpkg'
            suffix: 'windows-win64'
            generator: 'Visual Studio 17 2022'
            arch: '-A x64'
          - name: 'Windows x86'
            os: windows-2022
            triplet: x86-windows
            vcpkg_dir: 'C:\vcpkg'
            suffix: 'windows-win32'
            generator: 'Visual Studio 17 2022'
            arch: '-A Win32'

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          path: |
            ${{ env.VCPKG_ROOT }}
            vcpkg_installed
            !${{ env.VCPKG_ROOT }}/.git
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          key: |
            ${{ runner.os }}-${{ matrix.triplet }}-${{ hashFiles( 'vcpkg.json' ) }}

      - name: Get vcpkg(windows)
        if: ${{ runner.os == 'Windows' && steps.vcpkg-cache.outputs.cache-hit != 'true' }}
        run: |
          cd ${{ github.workspace }}
          mkdir build -force
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: remove system vcpkg(windows)
        if: runner.os == 'Windows'
        run: rm -rf "$VCPKG_INSTALLATION_ROOT"
        shell: bash

      - name: Install vcpkg packages
        run: |
          ${{ env.VCPKG_ROOT }}\vcpkg.exe install --triplet ${{ matrix.triplet }} > dependencies.txt

      - name: Configure and build
        shell: bash
        run: |
          BUILD_DIR=./build
          mkdir -p $BUILD_DIR
          cmake -B $BUILD_DIR \
            -G "${{ matrix.generator }}" ${{ matrix.arch }} \
            -DBUILD_TESTS=OFF \
            -DVCPKG_TRIPLET=${{ matrix.triplet }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.mode }} \
            -DBUILD_PYTHON_WRAPPER=OFF \
            -S .
          cmake --build $BUILD_DIR --parallel --config ${{ matrix.mode }}

      - name: Package
        shell: bash
        run: |
          BUILD_DIR=./build
          PACKAGE_DIR=./package
          LIB_DIR=$PACKAGE_DIR/lib/${{ matrix.mode }}
          VCPKG_INSTALLED_DIR=$PACKAGE_DIR/vcpkg_installed
          mkdir -p $PACKAGE_DIR
          mkdir -p $LIB_DIR
          mkdir -p $VCPKG_INSTALLED_DIR/${{ matrix.triplet }}
          
          cp dependencies.txt $PACKAGE_DIR
          cp -r ./include $PACKAGE_DIR
          cp -r $BUILD_DIR/include/ $PACKAGE_DIR
          cp -r $BUILD_DIR/lib/${{ matrix.mode }}/*.lib $LIB_DIR
          cp -r $BUILD_DIR/lib/${{ matrix.mode }}/*.dll $LIB_DIR
          cp -r ./vcpkg_installed/${{ matrix.triplet }}/* $VCPKG_INSTALLED_DIR/${{ matrix.triplet }}

      - name: Zip artifact
        shell: bash
        run: 7z a -tzip Windows-${{ matrix.triplet }}-${{ matrix.mode }}.zip ./package

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: Windows-${{ matrix.triplet }}-${{ matrix.mode }}.zip
          asset_name: Windows-${{ matrix.triplet }}-${{ matrix.mode }}.zip
          tag: ${{ github.ref }}
          overwrite: true
